<?php

namespace PP\RequestBundle\Entity;
use Doctrine\ORM\Tools\Pagination\Paginator;

use PP\RequestBundle\Constant\Constants;
/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRequestRepository extends \Doctrine\ORM\EntityRepository
{                
        public function getIdBySlug($slug){
            $qb = $this->createQueryBuilder('ir')
                        ->select('ir.id')
                        ->where('ir.slug = :slug')
                        ->setParameter('slug', $slug);
            return  $qb
                        ->getQuery()
                        ->getSingleScalarResult();
        }
        
        public function getImageRequestsId($em, $searchParam, $limit, $page, $displayMode, $userId, $followingIds, $tagsParam = null, $categoriesParam = null)
	{
             $qb = $this->createQueryBuilder('ir')
                        ->select('ir.id')
                        ->distinct(true)
                        ->leftJoin('ir.tags', 't')
                        ->leftJoin('ir.category', 'c')
            ;
             
            if($searchParam != null){
                $qb = $qb
                        ->where($qb->expr()->like('ir.title', ':title'))
                        ->setParameter('title', '%'.$searchParam.'%')
                        ->orWhere($qb->expr()->like('t.name', ':name'))
                        ->setParameter('name', '%'.$searchParam.'%')
                        ->orWhere($qb->expr()->like('c.name', ':cat'))
                        ->setParameter('cat', '%'.$searchParam.'%');
                        
            }
            
            if($tagsParam != null){
                $i = 0;
                foreach ($tagsParam as $tagName){
                    $qb = $qb
                        ->orWhere('t.name = :name'.$i)
                        ->setParameter('name'.$i, $tagName);
                    $i++;
                }                
            }
            
            if($categoriesParam != null){
                $i = 0;
                foreach ($categoriesParam as $cat){
                    $qb = $qb
                        ->orWhere('c.name = :name'.$i)
                        ->setParameter('name'.$i, $cat);
                    $i++;
                }                
            }
            
            if($displayMode == Constants::ORDER_BY_DATE){
                $qb = $qb->orderBy('ir.createdDate', 'DESC'); 
            }else if($displayMode == Constants::ORDER_BY_UPVOTE){
                $qb = $qb->orderBy('ir.upvote + ir.propositionsNb', 'DESC'); 
            }else if($displayMode == Constants::ORDER_BY_INTEREST){
                $qb = $qb
                        ->leftJoin('ir.author', 'irA')                        
                        ->from('PPUserBundle:User', 'u')                         
                        ->andwhere('u.id = :userId')
                         ->setParameter('userId', $userId)
                        ->leftJoin('u.following', 'uF')                       
                        ->andwhere("irA.id IN(:followingIds)")
                        ->setParameter('followingIds', array_values($followingIds))
                        ->orderBy('ir.createdDate', 'DESC'); 
                ;
            }
            
            $qb = $qb
                      ->setFirstResult(($page-1) * $limit)
                      ->setMaxResults($limit)
            ;
             
            return $qb
               ->getQuery()
               ->getResult()
            ;           		  
	}
                        
    	public function getOneImageRequest($id)
	{
            $qb = $this
                ->createQueryBuilder('ir')
                ->where('ir.id = :id')
                ->setParameter('id', $id)
                ->leftJoin('ir.author', 'irA')
                ->addSelect('irA')
                ->leftJoin('ir.category', 'c')
                ->addSelect('c')
                ->leftJoin('ir.tags', 't')
                ->addSelect('t')                
            ;                                    
          
	  return $qb
		->getQuery()
		->getSingleResult()
	  ;
	}
        
        /* query for profile page */
        
        public function getUserImageRequestContributionIds($userid, $limit, $page){
             $qb = $this
                ->createQueryBuilder('ir')
                ->select('ir.id')
                ->where('ir.author = :userId')
                ->leftJoin('ir.propositions', 'p')
                ->orWhere('p.author = :userId')
                ->setParameter('userId', $userid)
                ->orderBy('ir.createdDate', 'DESC')
                ->distinct(true)                
            ;
             
            $qb = $qb
                   ->setFirstResult(($page-1) * $limit)
                   ->setMaxResults($limit)
               ;
            return $qb
               ->getQuery()
               ->getResult()
            ;  
        }
        
        public function getPopularImageRequests($limit){
            $today = new \DateTime();         
            $lastWeek = new \DateTime();        
            $lastWeek->sub(new \DateInterval('P7D'));         

            $qb = $this->createQueryBuilder('ir')
                        ->distinct(true)
                        ->leftJoin('ir.author', 'irA')
                        ->addSelect('irA')
                        ->where('ir.createdDate BETWEEN :lastWeek AND :today')                        
                        ->setParameter('lastWeek', $lastWeek)
                        ->setParameter('today', $today)                                         
                        ->addOrderBy('ir.upvote + ir.propositionsNb', 'DESC')
                        ->setMaxResults($limit)
        ; 
        return  $qb
                           ->getQuery()
                           ->getResult(); 
        }
    
}
